(in-package :now)
(defun ical-line (string)
  (let ((p1 (position #\space string))
        (p2 (position #\: string)))
    (and p1 p2 (< p2 p1))))

(defun parse-ical (string)
  (let (began summary)
    (iter (for line in (mapcar (lambda (el) (string-right-trim '(#\return) el))
                               (split-sequence #\newline string)))
          (if (not began)
            (if (string-equal line "BEGIN:VCALENDAR")
              (setf began t)
              (error "invalid ical ~S, begin expected" line))
            (flet ((parse-line (el)
                       (when-let (pos (position #\: el))
                         (let ((key (subseq el 0 pos))
                               (val (subseq el (1+ pos))))
                           (if (string= key "SUMMARY")
                             (push val summary)
                             (collect (list key val)))))))
              (if summary
                (if (ical-line line)
                  (progn
                    (collect (list "SUMMARY" (nreverse summary)))
                    (setf summary nil)
                    (parse-line line))
                  (push line summary))
                (parse-line line)))))))
