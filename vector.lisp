(in-package :now)

(defun draw-icon (icon color size)
  (with-canvas (:width (+ size (floor (* size (/ 1 10)))) :height (+ size (floor (* size (/ 1 10)))))
    (let ((font (get-font (now-file "fontawesome-webfont.ttf"))))
      ;; (set-rgba-stroke 1.0 0 0 1.0)
      ;; (rectangle 0 0 1 1)
      ;; (rectangle (1- size) (1- size) 1 1)
      (set-font font size)
      (when color
        (multiple-value-bind (r g b a) (rgba-from-hex color)
          (set-rgba-fill (float (/ r 255))
                         (float (/ g 255))
                         (float (/ b 255))
                         (float (/ (or a 255) 255))))        )
      (draw-string 0 (floor (* size (/ 2 10)))
                   (princ-to-string (icon-index-from-name icon)))
      (stroke)
      (flexi-streams:with-output-to-sequence (stream)
        (save-png-stream stream)))))

(defun-simple-memoized draw-icon-memoized (icon-color-size :test equal)
  (draw-icon (first icon-color-size) (second icon-color-size) (third icon-color-size)))

(defun vector-dispatch ()
  (setf (hunchentoot:content-type*) "image/png")
  (let ((raw (subseq (hunchentoot:script-name*) 10)))
    (destructuring-bind (name &optional color size) (split-sequence #\/ raw)
      (draw-icon name color (or (and size (parse-integer size)) 24 )))))
